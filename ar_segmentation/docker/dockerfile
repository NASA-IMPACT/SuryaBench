# Base image with CUDA and CUDNN
FROM nvidia/cuda:11.5.2-cudnn8-devel-ubuntu20.04

# Set non-interactive mode and configure timezone
ENV DEBIAN_FRONTEND=noninteractive
RUN apt-get update && apt-get install -y tzdata && \
    ln -fs /usr/share/zoneinfo/America/New_York /etc/localtime && \
    dpkg-reconfigure --frontend noninteractive tzdata

# Install dependencies
RUN apt-get update && apt-get install -y \
    build-essential \
    cmake \
    git \
    libgtk2.0-dev \
    pkg-config \
    libavcodec-dev \
    libavformat-dev \
    libswscale-dev \
    libtbb2 \
    libtbb-dev \
    libjpeg-dev \
    libpng-dev \
    libtiff-dev \
    libdc1394-22-dev \
    python3-dev \
    python3-numpy \
    libgstreamer-plugins-base1.0-dev \
    libgstreamer1.0-dev \
    libgtk-3-dev \
    libopenexr-dev \
    libwebp-dev \
    wget \
    vim \
    clang \
    libyaml-cpp-dev \
    libhdf5-dev && \
    apt-get clean && rm -rf /var/lib/apt/lists/*

# Clone OpenCV and contrib modules
RUN git clone https://github.com/opencv/opencv.git /opt/opencv && \
    cd /opt/opencv && \
    git checkout 4.5.2

RUN git clone https://github.com/opencv/opencv_contrib.git /opt/opencv_contrib && \
    cd /opt/opencv_contrib && \
    git checkout 4.5.2

# Build OpenCV
RUN mkdir /opt/opencv/build && \
    cd /opt/opencv/build && \
    cmake -D CMAKE_BUILD_TYPE=RELEASE \
    -D CMAKE_INSTALL_PREFIX=/usr/local \
    -D WITH_TBB=ON \
    -D ENABLE_FAST_MATH=1 \
    -D CUDA_FAST_MATH=1 \
    -D WITH_CUBLAS=1 \
    -D WITH_CUDA=ON \
    -D BUILD_opencv_cudacodec=OFF \
    -D WITH_CUDNN=ON \
    -D OPENCV_DNN_CUDA=ON \
    -D CUDA_ARCH_BIN=6.0 \
    -D WITH_V4L=ON \
    -D WITH_QT=OFF \
    -D WITH_OPENGL=ON \
    -D WITH_GSTREAMER=ON \
    -D OPENCV_GENERATE_PKGCONFIG=ON \
    -D OPENCV_PC_FILE_NAME=opencv.pc \
    -D OPENCV_ENABLE_NONFREE=ON \
    -D OPENCV_PYTHON3_INSTALL_PATH=$(python3 -c "import sysconfig; print(sysconfig.get_path('purelib'))") \
    -D PYTHON_EXECUTABLE=/usr/bin/python3 \
    -D OPENCV_EXTRA_MODULES_PATH=/opt/opencv_contrib/modules \
    -D INSTALL_PYTHON_EXAMPLES=OFF \
    -D INSTALL_C_EXAMPLES=OFF \
    -D BUILD_EXAMPLES=OFF \
    -D ENABLE_PRECOMPILED_CUDA=ON \
    .. && \
    make -j$(nproc) && \
    make install && \
    ldconfig

# Install cfitsio
RUN cd ~ && \
    wget https://heasarc.gsfc.nasa.gov/FTP/software/fitsio/c/cfitsio-4.2.0.tar.gz && \
    tar -xzvf cfitsio-4.2.0.tar.gz && \
    cd cfitsio-4.2.0 && \
    ./configure --prefix=/usr/local && \
    make && \
    make install

# Install HDF5
RUN wget https://support.hdfgroup.org/ftp/HDF5/releases/hdf5-1.12/hdf5-1.12.2/src/CMake-hdf5-1.12.2.tar.gz && \
    tar -xvf CMake-hdf5-1.12.2.tar.gz && \
    cd CMake-hdf5-1.12.2 && \
    chmod 755 build-unix.sh && \
    ./build-unix.sh && \
    cd hdf5-1.12.2 && \
    ./configure --prefix=/usr/local/hdf5 && \
    make -j$(nproc) && \
    make install

# Set environment variables
ENV LD_LIBRARY_PATH=/usr/local/lib:$LD_LIBRARY_PATH

# Set working directory and start shell
WORKDIR /root
CMD ["/bin/bash"]

